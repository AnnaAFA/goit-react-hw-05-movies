{"version":3,"file":"static/js/387.68aa546f.chunk.js","mappings":"yTAEaA,EAAUC,EAAAA,EAAAA,IAAH,qEAKPC,EAAOD,EAAAA,EAAAA,GAAH,4EAMJE,EAAOF,EAAAA,EAAAA,GAAH,qPAaJG,EAAOH,EAAAA,EAAAA,EAAH,sCAIJI,EAAYJ,EAAAA,EAAAA,EAAH,sCAITK,EAAQL,EAAAA,EAAAA,IAAH,+C,SC2BlB,EAtDa,WACX,OAA0BM,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAoBR,OAlBAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAc,mCAAG,oGAEnBN,GAAa,GAFM,UAGIO,EAAAA,EAAAA,IAAaJ,GAHjB,UAIG,KADhBK,EAHa,QAINC,KAJM,yCAKVC,IAAAA,OAAAA,QAAwB,oBALd,OAOnBZ,EAASU,EAASC,MAPC,kDASnBP,EAAS,EAAD,IATW,yBAWnBF,GAAa,GAXM,6EAAH,qDAcpBM,GACD,GAAE,CAACH,KAGF,UAACd,EAAD,WACGU,IAAa,SAACY,EAAA,EAAD,IACbV,IAAS,uBAAG,uCACZJ,EAAMe,OAAS,GACd,SAACrB,EAAD,UACGM,EAAMgB,KAAI,SAAAJ,GACT,OACE,UAACjB,EAAD,YACE,SAACG,EAAD,CACEmB,IACM,OAAJL,QAAI,IAAJA,GAAAA,EAAMM,aAAN,yCACsCN,EAAKM,cACvC,sCAENC,IAAKP,EAAKQ,QAEZ,SAACxB,EAAD,UAAOgB,EAAKQ,QACZ,UAACvB,EAAD,WAAW,eAAae,EAAKS,eAVpBT,EAAKU,GAanB,OAGH,uBAAG,qDAIV,C,mMCzDKC,EAAW,gCACXC,EAAU,mCAEHC,EAAW,mCAAG,oGACFC,EAAAA,EAAAA,IAAA,UAClBH,EADkB,oCACkBC,IAFhB,cACnBG,EADmB,yBAIlBA,EAASC,MAJS,2CAAH,qDAOXC,EAAe,mCAAG,WAAMC,GAAN,uFACNJ,EAAAA,EAAAA,IAAA,UAClBH,EADkB,gCACcC,EADd,kBAC+BM,EAD/B,+CADM,cACvBH,EADuB,yBAItBA,EAASC,MAJa,2CAAH,sDAOfG,EAAe,mCAAG,WAAMT,GAAN,uFACNI,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iBACDD,EADC,oBACaE,EADb,oBADM,cACvBG,EADuB,yBAItBA,EAASC,MAJa,2CAAH,sDAOflB,EAAY,mCAAG,WAAMY,GAAN,uFACHI,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iBACDD,EADC,4BACqBE,EADrB,oBADG,cACpBG,EADoB,yBAInBA,EAASC,MAJU,2CAAH,sDAOZI,EAAe,mCAAG,WAAMV,GAAN,uFACNI,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iBACDD,EADC,4BACqBE,EADrB,oBADM,cACvBG,EADuB,yBAItBA,EAASC,MAJa,2CAAH,qD","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","services/api.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const Wrap = styled.ul`\n  display: flex;\n  gap: 15px;\n  flex-wrap: wrap;\n`;\n\nexport const Item = styled.li`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  width: 150px;\n  margin-bottom: 20px;\n  border: 1px solid black;\n  border-radius: 5px;\n  padding: 15px;\n  text-align: center;\n  background-color: #c4daf5;\n`;\n\nexport const Name = styled.p`\n  margin: 0;\n`;\n\nexport const Character = styled.p`\n  margin: 0;\n`;\n\nexport const Image = styled.img`\n  border-radius: 3px;\n`;\n","import { Loader } from 'components/Loader/Loader';\nimport Notiflix from 'notiflix';\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieCast } from 'services/api';\nimport { Character, Image, Item, Name, Wrap, Wrapper } from './Cast.styled';\n\nconst Cast = () => {\n  const [casts, setCasts] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetchMovieCast = async () => {\n      try {\n        setIsLoading(true);\n        const castData = await getMovieCast(movieId);\n        if (castData.cast === 0) {\n          return Notiflix.Notify.failure('Cast not found!');\n        }\n        setCasts(castData.cast);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchMovieCast();\n  }, [movieId]);\n\n  return (\n    <Wrapper>\n      {isLoading && <Loader />}\n      {error && <p>Opps...Sorry, something went wrong</p>}\n      {casts.length > 0 ? (\n        <Wrap>\n          {casts.map(cast => {\n            return (\n              <Item key={cast.id}>\n                <Image\n                  src={\n                    cast?.profile_path\n                      ? `https://image.tmdb.org/t/p/w200${cast.profile_path}`\n                      : 'https://via.placeholder.com/200x300'\n                  }\n                  alt={cast.name}\n                />\n                <Name>{cast.name}</Name>\n                <Character>Character : {cast.character}</Character>\n              </Item>\n            );\n          })}\n        </Wrap>\n      ) : (\n        <p>Sorry! We don't have any casts for this movie.</p>\n      )}\n    </Wrapper>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = 'f9adb863f28a1c6f9debce9b06843390';\n\nexport const getTrending = async () => {\n  const response = await axios.get(\n    `${BASE_URL}trending/all/day?api_key=${API_KEY}`\n  );\n  return response.data;\n};\n\nexport const getSearchMovies = async searchValue => {\n  const response = await axios.get(\n    `${BASE_URL}search/movie?api_key=${API_KEY}&query=${searchValue}&include_adult=false&language=en-US&page=1`\n  );\n  return response.data;\n};\n\nexport const getMovieDetails = async id => {\n  const response = await axios.get(\n    `${BASE_URL}movie/${id}?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const getMovieCast = async id => {\n  const response = await axios.get(\n    `${BASE_URL}movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const getMovieReviews = async id => {\n  const response = await axios.get(\n    `${BASE_URL}movie/${id}/reviews?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n"],"names":["Wrapper","styled","Wrap","Item","Name","Character","Image","useState","casts","setCasts","isLoading","setIsLoading","error","setError","movieId","useParams","useEffect","fetchMovieCast","getMovieCast","castData","cast","Notiflix","Loader","length","map","src","profile_path","alt","name","character","id","BASE_URL","API_KEY","getTrending","axios","response","data","getSearchMovies","searchValue","getMovieDetails","getMovieReviews"],"sourceRoot":""}