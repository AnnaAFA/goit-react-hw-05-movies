{"version":3,"file":"static/js/410.ad34efd5.chunk.js","mappings":"wKAmBA,IAjBkB,SAAC,GAAgB,IAAdA,EAAa,EAAbA,OACbC,GAAWC,EAAAA,EAAAA,MACjB,OACE,wBACGF,EAAOG,KAAI,SAAAC,GACV,OACE,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAME,IAAMC,MAAO,CAAEC,KAAMP,GAAhD,SACGG,EAAMK,OAASL,EAAMM,QAFjBN,EAAME,GAMlB,KAGN,C,uJC8CD,UAxDmB,WACjB,OAAsCK,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAkCJ,EAAAA,EAAAA,WAAS,GAA3C,eAAOK,EAAP,KAAkBC,EAAlB,KACA,GAA0BN,EAAAA,EAAAA,UAAS,MAAnC,eAAOO,EAAP,KAAcC,EAAd,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,MAEAC,EAAAA,EAAAA,YAAU,WAAO,IAAD,EACRC,EAAiB,mCAAG,WAAMC,GAAN,8EACxBR,GAAa,GADW,mBAGOS,EAAAA,EAAAA,IAAgBD,GAHvB,UAIe,KAD/BE,EAHgB,QAIHC,cAJG,uBAKpBb,EAAS,IALW,kBAMbc,IAAAA,OAAAA,QAAwB,qBANX,OAQtBd,EAASY,EAAeG,SARF,kDAUtBX,EAAS,EAAD,IACRY,QAAQb,MAAR,MAXsB,yBAatBD,GAAa,GAbS,6EAAH,sDAgBjBe,EAAW,UAAGX,EAAaY,IAAI,gBAApB,QAAgC,GAC7CD,GACFR,EAAkBQ,EAErB,GAAE,CAACX,IAWJ,OACE,2BACGH,IAAS,uBAAG,uCACZF,IAAa,SAAC,IAAD,KACd,kBAAMkB,OAAO,GAAGC,SAbC,SAAAC,GAEnB,GADAA,EAAEC,kBACGzB,EAAY0B,OACf,OAAOT,IAAAA,OAAAA,QAAwB,2BAEjCP,EAAgB,CAAEG,MAAOb,EAAY0B,SACrCzB,EAAe,GAChB,EAMG,WACE,kBACE0B,KAAK,OACLC,MAAO5B,EACP6B,SAAU,SAAAL,GAAC,OAAIvB,EAAeuB,EAAEM,OAAOF,MAA5B,KAEb,4BAAQ,cAEQ,IAAjB1B,EAAM6B,SAAgB,SAAC,IAAD,CAAW3C,OAAQc,MAG/C,C,mMC3DK8B,EAAW,gCACXC,EAAU,mCAEHC,EAAW,mCAAG,oGACFC,EAAAA,EAAAA,IAAA,UAClBH,EADkB,oCACkBC,IAFhB,cACnBG,EADmB,yBAIlBA,EAASC,MAJS,2CAAH,qDAOXvB,EAAe,mCAAG,WAAMwB,GAAN,uFACNH,EAAAA,EAAAA,IAAA,UAClBH,EADkB,gCACcC,EADd,kBAC+BK,EAD/B,+CADM,cACvBF,EADuB,yBAItBA,EAASC,MAJa,2CAAH,sDAOfE,EAAe,mCAAG,WAAM7C,GAAN,uFACNyC,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iBACDtC,EADC,oBACauC,EADb,oBADM,cACvBG,EADuB,yBAItBA,EAASC,MAJa,2CAAH,sDAOfG,EAAY,mCAAG,WAAM9C,GAAN,uFACHyC,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iBACDtC,EADC,4BACqBuC,EADrB,oBADG,cACpBG,EADoB,yBAInBA,EAASC,MAJU,2CAAH,sDAOZI,EAAe,mCAAG,WAAM/C,GAAN,uFACNyC,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iBACDtC,EADC,4BACqBuC,EADrB,oBADM,cACvBG,EADuB,yBAItBA,EAASC,MAJa,2CAAH,qD","sources":["components/MovieList/MovieList.jsx","pages/SearchPage.jsx","services/api.js"],"sourcesContent":["import { Link, useLocation } from 'react-router-dom';\n\nconst MovieList = ({ movies }) => {\n  const location = useLocation();\n  return (\n    <ul>\n      {movies.map(movie => {\n        return (\n          <li key={movie.id}>\n            <Link to={`/movies/${movie.id}`} state={{ from: location }}>\n              {movie.title || movie.name}\n            </Link>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nexport default MovieList;\n","import { Loader } from 'components/Loader/Loader';\nimport MovieList from 'components/MovieList/MovieList';\nimport Notiflix from 'notiflix';\nimport React, { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { getSearchMovies } from 'services/api';\n\nconst SearchPage = () => {\n  const [searchInput, setSearchInput] = useState('');\n  const [films, setFilms] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  useEffect(() => {\n    const fetchSearchMovies = async query => {\n      setIsLoading(true);\n      try {\n        const searchFilmData = await getSearchMovies(query);\n        if (searchFilmData.total_results === 0) {\n          setFilms([]);\n          return Notiflix.Notify.failure('Movie not found!');\n        }\n        setFilms(searchFilmData.results);\n      } catch (error) {\n        setError(error);\n        console.error(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    const searchQuery = searchParams.get('query') ?? '';\n    if (searchQuery) {\n      fetchSearchMovies(searchQuery);\n    }\n  }, [searchParams]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!searchInput.trim()) {\n      return Notiflix.Notify.failure('Please, write something');\n    }\n    setSearchParams({ query: searchInput.trim() });\n    setSearchInput('');\n  };\n\n  return (\n    <div>\n      {error && <p>Opps...Sorry, something went wrong</p>}\n      {isLoading && <Loader />}\n      <form action=\"\" onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          value={searchInput}\n          onChange={e => setSearchInput(e.target.value)}\n        />\n        <button>Search</button>\n      </form>\n      {films.length !== 0 && <MovieList movies={films} />}\n    </div>\n  );\n};\n\nexport default SearchPage;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = 'f9adb863f28a1c6f9debce9b06843390';\n\nexport const getTrending = async () => {\n  const response = await axios.get(\n    `${BASE_URL}trending/all/day?api_key=${API_KEY}`\n  );\n  return response.data;\n};\n\nexport const getSearchMovies = async searchValue => {\n  const response = await axios.get(\n    `${BASE_URL}search/movie?api_key=${API_KEY}&query=${searchValue}&include_adult=false&language=en-US&page=1`\n  );\n  return response.data;\n};\n\nexport const getMovieDetails = async id => {\n  const response = await axios.get(\n    `${BASE_URL}movie/${id}?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const getMovieCast = async id => {\n  const response = await axios.get(\n    `${BASE_URL}movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const getMovieReviews = async id => {\n  const response = await axios.get(\n    `${BASE_URL}movie/${id}/reviews?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n"],"names":["movies","location","useLocation","map","movie","to","id","state","from","title","name","useState","searchInput","setSearchInput","films","setFilms","isLoading","setIsLoading","error","setError","useSearchParams","searchParams","setSearchParams","useEffect","fetchSearchMovies","query","getSearchMovies","searchFilmData","total_results","Notiflix","results","console","searchQuery","get","action","onSubmit","e","preventDefault","trim","type","value","onChange","target","length","BASE_URL","API_KEY","getTrending","axios","response","data","searchValue","getMovieDetails","getMovieCast","getMovieReviews"],"sourceRoot":""}