{"version":3,"file":"static/js/387.5a09b3ea.chunk.js","mappings":"2TASaA,GAPOC,EAAAA,EAAAA,GAAH,iGAOGA,EAAAA,EAAAA,GAAH,yH,SCqDjB,EAtDa,WACX,OAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAoBR,OAlBAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAc,mCAAG,oGAEnBN,GAAa,GAFM,UAGIO,EAAAA,EAAAA,IAAaJ,GAHjB,UAIG,KADhBK,EAHa,QAINC,KAJM,yCAKVC,IAAAA,OAAAA,QAAwB,oBALd,OAOnBZ,EAASU,EAASC,MAPC,kDASnBP,EAAS,EAAD,IATW,yBAWnBF,GAAa,GAXM,6EAAH,qDAcpBM,GACD,GAAE,CAACH,KAGF,gCACGJ,IAAa,SAACY,EAAA,EAAD,IACbV,IAAS,uBAAG,uCACZJ,EAAMe,OAAS,GACd,SAAC,KAAD,UACGf,EAAMgB,KAAI,SAAAJ,GACT,OACE,UAACf,EAAD,YACE,gBACEoB,IACM,OAAJL,QAAI,IAAJA,GAAAA,EAAMM,aAAN,yCACsCN,EAAKM,cACvC,sCAENC,IAAKP,EAAKQ,QAEZ,uBAAIR,EAAKQ,QACT,yBAAG,eAAaR,EAAKS,eAVZT,EAAKU,GAanB,OAGH,uBAAG,qDAIV,C,yKCzDYC,GAAUzB,EAAAA,EAAAA,GAAO0B,EAAAA,GAAP1B,CAAH,6OAcP2B,EAAO3B,EAAAA,EAAAA,IAAH,0FAMJ4B,EAAW5B,EAAAA,EAAAA,IAAH,6GAOR6B,GAAa7B,EAAAA,EAAAA,GAAO0B,EAAAA,GAAP1B,CAAH,iQ,mMC5BjB8B,EAAW,gCACXC,EAAU,mCAEHC,EAAW,mCAAG,oGACFC,EAAAA,EAAAA,IAAA,UAClBH,EADkB,oCACkBC,IAFhB,cACnBG,EADmB,yBAIlBA,EAASC,MAJS,2CAAH,qDAOXC,EAAe,mCAAG,WAAMC,GAAN,uFACNJ,EAAAA,EAAAA,IAAA,UAClBH,EADkB,gCACcC,EADd,kBAC+BM,EAD/B,+CADM,cACvBH,EADuB,yBAItBA,EAASC,MAJa,2CAAH,sDAOfG,EAAe,mCAAG,WAAMd,GAAN,uFACNS,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iBACDN,EADC,oBACaO,EADb,oBADM,cACvBG,EADuB,yBAItBA,EAASC,MAJa,2CAAH,sDAOfvB,EAAY,mCAAG,WAAMY,GAAN,uFACHS,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iBACDN,EADC,4BACqBO,EADrB,oBADG,cACpBG,EADoB,yBAInBA,EAASC,MAJU,2CAAH,sDAOZI,EAAe,mCAAG,WAAMf,GAAN,uFACNS,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iBACDN,EADC,4BACqBO,EADrB,oBADM,cACvBG,EADuB,yBAItBA,EAASC,MAJa,2CAAH,qD","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","pages/DetailsPage.styled.js","services/api.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Wrap = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 15px;\n  list-style: none;\n`;\n\nexport const Item = styled.li`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  width: 250px;\n  list-style: none;\n`;\n","import { Loader } from 'components/Loader/Loader';\nimport Notiflix from 'notiflix';\nimport { Wrap } from 'pages/DetailsPage.styled';\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieCast } from 'services/api';\nimport { Item } from './Cast.styled';\n\nconst Cast = () => {\n  const [casts, setCasts] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetchMovieCast = async () => {\n      try {\n        setIsLoading(true);\n        const castData = await getMovieCast(movieId);\n        if (castData.cast === 0) {\n          return Notiflix.Notify.failure('Cast not found!');\n        }\n        setCasts(castData.cast);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchMovieCast();\n  }, [movieId]);\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {error && <p>Opps...Sorry, something went wrong</p>}\n      {casts.length > 0 ? (\n        <Wrap>\n          {casts.map(cast => {\n            return (\n              <Item key={cast.id}>\n                <img\n                  src={\n                    cast?.profile_path\n                      ? `https://image.tmdb.org/t/p/w200${cast.profile_path}`\n                      : 'https://via.placeholder.com/200x300'\n                  }\n                  alt={cast.name}\n                />\n                <p>{cast.name}</p>\n                <p>Character : {cast.character}</p>\n              </Item>\n            );\n          })}\n        </Wrap>\n      ) : (\n        <p>Sorry! We don't have any casts for this movie.</p>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n","import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const BtnBack = styled(Link)`\n  padding: 3px 5px;\n  border-radius: 5px;\n  text-decoration: none;\n  color: black;\n  border: 1px solid black;\n  //   margin-left: 50px;\n\n  &:hover {\n    background-color: #483d8b;\n    color: white;\n  }\n`;\n\nexport const Wrap = styled.div`\n  margin-top: 20px;\n  margin-left: 50px;\n  //   display: flex;\n`;\n\nexport const WrapCard = styled.div`\n  margin-top: 20px;\n  display: flex;\n  gap: 10px;\n  //   flex-direction: column;\n`;\n\nexport const DetailsBtn = styled(Link)`\n  padding: 3px 5px;\n  border-radius: 5px;\n  text-decoration: none;\n  color: black;\n  border: 1px solid black;\n  //   margin-left: 50px;\n  margin-left: 5px;\n\n  &:hover {\n    background-color: #483d8b;\n    color: white;\n  }\n`;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = 'f9adb863f28a1c6f9debce9b06843390';\n\nexport const getTrending = async () => {\n  const response = await axios.get(\n    `${BASE_URL}trending/all/day?api_key=${API_KEY}`\n  );\n  return response.data;\n};\n\nexport const getSearchMovies = async searchValue => {\n  const response = await axios.get(\n    `${BASE_URL}search/movie?api_key=${API_KEY}&query=${searchValue}&include_adult=false&language=en-US&page=1`\n  );\n  return response.data;\n};\n\nexport const getMovieDetails = async id => {\n  const response = await axios.get(\n    `${BASE_URL}movie/${id}?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const getMovieCast = async id => {\n  const response = await axios.get(\n    `${BASE_URL}movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const getMovieReviews = async id => {\n  const response = await axios.get(\n    `${BASE_URL}movie/${id}/reviews?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n"],"names":["Item","styled","useState","casts","setCasts","isLoading","setIsLoading","error","setError","movieId","useParams","useEffect","fetchMovieCast","getMovieCast","castData","cast","Notiflix","Loader","length","map","src","profile_path","alt","name","character","id","BtnBack","Link","Wrap","WrapCard","DetailsBtn","BASE_URL","API_KEY","getTrending","axios","response","data","getSearchMovies","searchValue","getMovieDetails","getMovieReviews"],"sourceRoot":""}